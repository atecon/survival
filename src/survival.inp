function list sort_by (const list L, const int colpos[1::])
    /* Sort 'L' by 'colpos'.
    return: list, Series sorted by the i-th series of 'L' in ascending order */

    list R

    matrix M = {L}
    M = msortby(M, colpos)
    cnameset(M, varnames(L))
    list R = mat2list(M)

    return R
end function


function bundle get_basics (const series y)
    /* Prepare basic bundle. */

    bundle self

    scalar self.ci_level = 0.95          # width confidence interval
    matrix self.periods = values(y) # Distinct time points at which are events
    # estimate of survival prob. at time t+0
    matrix self.survival = mshape(NA, nelem(self.periods), 1)
    # the number of events that occur at time t
    matrix self.n_events = mshape(NA, nelem(self.periods), 1)
    # number of subjects for each group at time t
    matrix self.n_subjects = nobs(y) | mshape(NA, nelem(self.periods) - 1, 1)
    string self.filename = "display"  # for plot function only

    return self
end function


function bundle kaplanmeier (series y "survival time",
                             series censored "0: not censored, 1: right-censored",
                             const bundle self[null] "Optional settings")
    /* Kaplan-Meier estimator */

    genr index
    list L = index y censored
    smpl L --no-missing

    # TODO: merge B and self
    bundle B = get_basics(y)

    if exists(self)
        B = self + B
    endif

    errorif(B.ci_level <= 0 || B.ci_level >= 1,\
            "Parameter 'ci_level' must be between 0 and 1.")

    list L = sort_by(L, inlist(L, y))

    loop t=1..nelem(B.periods)
        smpl y == B.periods[t] --restrict --replace
        B.n_events[t] = nobs(y)

        # Check whether at t all subjects are censored
        scalar n_censored = sum(censored)
        scalar all_censored = (n_censored == B.n_events[t])

        if all_censored
            # Do not count censored subjects anymore
            B.n_subjects[t] -= B.n_events[t]
            B.survival[t] = B.survival[t-1]
            B.n_events[t] = 0
            continue   # TODO: requires gretl 2022b
        endif

        smpl censored == FALSE --restrict  # disregard censored subjects
        B.n_events[t] = $nobs   # update disregarding censored subjects

        if t > 1
            B.n_subjects[t] = B.n_subjects[t - 1] - \
                                   B.n_events[t-1]
        endif

        # conditional probability to survive at t given that no event has occurred yet
        scalar q = 1 - B.n_events[t] / B.n_subjects[t]

        B.survival[t] = q
        if t > 1
            B.survival[t] *= B.survival[t-1]
        endif
    endloop

    smpl full

    B.periods = {0} | B.periods
    B.n_events = {0} | B.n_events
    B.n_subjects = $nobs | B.n_subjects
    B.survival = {1} | B.survival
    greenwood_variance(&B)

    return B
end function


function void greenwood_variance (bundle *self)
    /* Variance of the Kaplan-Meier estimator using Greenwood's (1926) formula which is derived from a Taylor-approximation.
    https://en.wikipedia.org/wiki/Kaplan%E2%80%93Meier_estimator#Statistical_considerations
    return: scalar, Variance of the estimator */

    scalar critval = invcdf(n, self.ci_level)
    self.variance = mshape(NA, rows(self.periods), 1)
    self.lower = mshape(NA, rows(self.periods), 1)
    self.upper = mshape(NA, rows(self.periods), 1)

    scalar nominator = 0
    scalar denominator = 0

    loop t=1..rows(self.periods)
        scalar nominator += self.n_events[t]
        scalar denominator += self.n_subjects[t] * \
                        (self.n_subjects[t] - self.n_events[t])

        # TODO: Not fully sure about that formula -- looks to work without
        # multiplication of "self.survival[t]^2"
        self.variance[t] =  nominator / denominator #* self.survival[t]^2

        scalar factor = sqrt(self.variance[t]) * critval
        self.lower[t] = self.survival[t] - factor
        self.upper[t] = self.survival[t] + factor
    endloop

    self.lower = censor_cibounds(self.lower)
    self.upper = censor_cibounds(self.upper)
    self.stderror = sqrt(self.variance)
end function


function matrix censor_cibounds (matrix m)
    /* Make sure values are between zero an 1.
    return: matrix, Censored values between 0 and 1.  */

    m = m .> 1 ? 1 : m
    m = m .< 0 ? 0 : m

    return m
end function


function void print_kaplanmeier (const bundle self)
    /* Print estimation results.
    return: void */

    matrix M = self.periods ~ self.n_subjects ~ self.n_events ~ \
    self.survival ~ self.stderror ~ self.lower ~ self.upper

    scalar cilevel = self.ci_level * 100


    strings colnames = defarray("Time",\
                                "N(subjects)",\
                                "N(Failed)",\
                                "Probability",\
                                "Std. Error",\
                                sprintf("Low(%d pct.)", cilevel),\
                                sprintf("Up(%d pct.)", cilevel))

    cnameset(M, colnames)

    printf "%16.5f", M
end function


function void plot_kaplanmeier (bundle self,
                                const bundle opts[null])
    /* Plot Kaplan-Meier curves */

    # TODO: allow tweaking the plot

    self = exists(opts) ? (opts + self) : self
    matrix M = self.lower ~ self.survival ~ self.upper ~ self.periods
    string xname = "Time"
    string yname = "Survival probability"
    string filename = self.filename
    string title = get_title_km_plot(self.ci_level)

    plot M
           options with-steps fit=none
           literal set linetype 1 lw 1.5 lc rgb "black" dt 2
           literal set linetype 2 lw 1.5 lc rgb "red"
           literal set linetype 3 lw 1.5 lc rgb "black" dt 2
           literal set nokey
           printf "set title \"%s\" font ',12'", title
           printf "set xlabel \"%s\" font ',11'", xname
           printf "set ylabel \"%s\" font ',11'", yname
           literal set grid
           literal set yrange[-0.05:1.05]
           literal set xrange[-0.1:]
    end plot --output="@filename"
end function


function string get_title_km_plot (const scalar ci_level)
    /* Compile the title string for the plot of the survival function. */

    return sprintf("Kaplan-Meier survival function with %d pct. interval",\
                   100*ci_level)
end function
